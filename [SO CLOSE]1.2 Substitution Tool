import enchant
import re
import string
from collections import OrderedDict
from collections import Counter
d = enchant.Dict("en_us")
letters12 = ["e, t, a, o, i, n, s, h, r, d, l, c, u, m, w, f, g, y, p, b, v, k, j, x, q, z"]
let = ["e", "t", "a", "o", "i", "n"]
line = "-----------------------------------------------------------"

def returnMenu():
    reply = raw_input("Do you want to go back to the Menu? [y/n]: ")

    if reply == "N":
        raise SystemExit
    elif reply == "Y":
        amazingMenu()
    elif reply == "n":
        raise SystemExit
    elif reply == "y":
        amazingMenu()
    return

def cipher():
    
    hehe = raw_input("Please enter the cipher message: ")
    haha = input("How many do you want to shift it by? ")
    key = string.ascii_letters
    rotation = haha
    tab = string.maketrans(key,key[rotation:]+key[:rotation])
    yes = hehe.translate(tab)
    print yes


def decipher():
    
    hehe = raw_input("Please enter the cipher message: ")
    haha = input("How many do you want to shift it by? ")
    key = string.ascii_letters
    rotation = 0-haha
    tab = string.maketrans(key,key[rotation:]+key[:rotation])
    yes = hehe.translate(tab)
    print yes

def manualDecipher():
    print line
    input = raw_input("Please input the cipher: ")#human input
    print " "
    nondupe = "".join(OrderedDict.fromkeys(input))#removes duplicate characters
    print "Cipher characters: " + nondupe #
    print " "
    new = input #Init replacement
    s = list(nondupe) #makes list of nondupe chars
    p = [] # empty list
    for i in range(len(s)):
        u = raw_input("What would you like to change " + s[i] + " to? ") #s[i] asking what would you like to change each character to
        print line
        p.append(u) 
        print p
        new = new.replace(s[i], u) #replaces old chars with new chars
        print input, " -- ", new
        print line
    return new

    new = manualDecipher()

    print "The Deciphered word is: " + new
    wordList = re.sub("[^\w]", " ", new).split()

    for i in range(len(wordList)):#Spell Check
        hehe = d.check(wordList[i])#Spell Check

    print "The spelling is: " + (str(hehe)) #Spell Check

    print line

def automaticDecipher():
    input = raw_input("Please input the cipher: ")#human input
    nondupe = "".join(OrderedDict.fromkeys(input))#removes duplicate characters
    print "Cipher characters: " + nondupe #
    new = input #Init replacement
    s = list(nondupe) #makes list of nondupe chars
    p = [] # empty list
   

    b = Counter(new) #Counts how many of each char there is in NEW
    print b
    print line
    print new
    wordList = re.sub("[^\w]", " ", new).split()

    for i in range(len(wordList)):#Spell Check
        hehe = d.check(wordList[i])#Spell Check

    print "The spelling is: " + (str(hehe)) #Spell Check

    makeList = list(b.elements()) #makes list of all letters used

    common = Counter(makeList).most_common(7) #Shows most popular letters used

    trial = str(common).strip('[]') #Changes to string and removes []
    print trial

    lines = re.sub("[!@ '(),' '1234567890]", '', trial) #Removes numbers and the space
    space = " ".join(lines[i:i+1] for i in range(0, len(lines), 1)) #adds space inbetween each character
    redo = space.split() #puts it into list
    print redo

    mystring = new #Trying to automate letter swaps
    print mystring

    idx = 0
    print "*"*5
    print redo
    print let
    
    while idx < len(redo):
        print idx
        
        if idx > len(let):
            print "OUT OF POPULAR LETTERS"
            break
        
        mystring = mystring.replace(redo[idx], let[idx])
        print mystring
        idx += 1

    print mystring

    return new


def amazingMenu():
    print (35 * '-')
    print ("   \tM A I N - M E N U")
    print (35 * '-')
    print ("\t1. manualDecipher")
    print ("\t2. automaticDecipher")
    print ("\t3. cipher")
    print ("\t4. decipher")
    print ("\t5. Exit program")
    print (35 * '-')

    choice = input('Enter your choice [1-5] : ')
    
        
    choice = int(choice)
    if choice == 1:
        print ("Starting manualDecipher...")
        manualDecipher()
        returnMenu()
    elif choice == 2:
        print ("Starting automaticDecipher...")
        automaticDecipher()
        returnMenu()
    elif choice == 3:
        print ("starting cipher...")
        cipher()
        returnMenu()
    elif choice == 4:
        print ("starting decipher...")
        decipher()
        returnMenu()       
    elif choice == 5:
        raise SystemExit
    else:
        print ("Invalid number. Try again...")


amazingMenu()
